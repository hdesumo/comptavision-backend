generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === MULTI-TENANT CORE ===
model Tenant {
  id            String   @id @default(cuid())
  name          String   // Nom du cabinet
  slug          String   @unique // URL slug
  country       String   // Pays OHADA
  currency      String   @default("XAF") // FCFA par défaut
  plan          String   @default("STARTER") // Plan d'abonnement
  status        String   @default("ACTIVE") // ACTIVE, SUSPENDED, CANCELLED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  users         User[]
  clients       Client[]
  integrations  Integration[]
  
  @@map("tenants")
}

// === UTILISATEURS ===
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        String   @default("MEMBER") // OWNER, ADMIN, MEMBER, VIEWER
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Multi-tenant
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("users")
}

// === CLIENTS DU CABINET ===
model Client {
  id              String   @id @default(cuid())
  name            String
  email           String?
  phone           String?
  address         String?
  businessType    String?  // Secteur d'activité
  registrationNo  String?  // N° RCCM
  taxId           String?  // N° contribuable
  
  // Scoring & Prédictions
  healthScore     Int?     @default(0) // 0-100
  riskLevel       String?  @default("LOW") // LOW, MEDIUM, HIGH
  lastAnalysis    DateTime?
  
  // Métadonnées
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Multi-tenant
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  financialData   FinancialData[]
  predictions     Prediction[]
  
  @@map("clients")
}

// === DONNÉES FINANCIÈRES ===
model FinancialData {
  id            String   @id @default(cuid())
  period        String   // "2024-01", "2024-Q1", etc.
  periodType    String   // "MONTHLY", "QUARTERLY", "YEARLY"
  
  // Données comptables de base (SYSCOHADA)
  revenue       Decimal? @db.Decimal(15,2)
  expenses      Decimal? @db.Decimal(15,2)
  assets        Decimal? @db.Decimal(15,2)
  liabilities   Decimal? @db.Decimal(15,2)
  equity        Decimal? @db.Decimal(15,2)
  cashFlow      Decimal? @db.Decimal(15,2)
  
  // Ratios calculés
  profitMargin  Decimal? @db.Decimal(5,2)
  debtRatio     Decimal? @db.Decimal(5,2)
  liquidityRatio Decimal? @db.Decimal(5,2)
  
  // Import info
  source        String?  // "ECOHADA", "SAGE", "EXCEL", "MANUAL"
  importedAt    DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([clientId, period, periodType])
  @@map("financial_data")
}

// === PRÉDICTIONS IA ===
model Prediction {
  id            String   @id @default(cuid())
  type          String   // "HEALTH_SCORE", "CASH_FLOW", "DEFAULT_RISK"
  value         Decimal  @db.Decimal(10,2)
  confidence    Decimal  @db.Decimal(3,2) // 0.00-1.00
  period        String   // Période prédite
  
  // Détails prédiction
  factors       Json?    // Facteurs ayant influencé la prédiction
  recommendations Json? // Recommandations automatiques
  
  createdAt     DateTime @default(now())
  
  // Relations
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("predictions")
}

// === INTÉGRATIONS COMPTABLES ===
model Integration {
  id            String   @id @default(cuid())
  name          String   // "ECOHADA", "Sage Afrique", etc.
  type          String   // "API", "CSV", "EXCEL"
  status        String   @default("INACTIVE") // ACTIVE, INACTIVE, ERROR
  
  // Configuration
  config        Json     // Paramètres de connexion (chiffrés)
  lastSync      DateTime?
  syncFrequency String   @default("DAILY") // DAILY, WEEKLY, MONTHLY
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Multi-tenant
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("integrations")
}

// === ABONNEMENTS ===
model Subscription {
  id              String   @id @default(cuid())
  stripeId        String?  @unique
  status          String   // ACTIVE, CANCELLED, PAST_DUE
  plan            String   // STARTER, PROFESSIONAL, ENTERPRISE
  amount          Decimal  @db.Decimal(10,2)
  currency        String   @default("EUR")
  
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Un tenant = un abonnement
  tenantId        String   @unique
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}
